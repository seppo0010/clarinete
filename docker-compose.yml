version: "3.9"
services:
  scrapy:
    build: scrapy
    depends_on:
      - "news-queue"
    networks:
      - scrapy-queue
  news-queue:
    image: rabbitmq:3-management
    restart: on-failure
    networks:
      - scrapy-queue
      - entitier-queue
      - deduplicator-queue
      - import-queue
      - summarizer-queue
      - ner-queue
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error}]
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
  entitier:
    build:
      context: ./entitier
      target: entitier
    restart: on-failure
    networks:
      - entitier-queue
    depends_on:
      - "news-queue"
  entitier_test:
    build: entitier
    image: entitier_test
    depends_on:
      - "news-queue"
    restart: "no"
    networks:
      - entitier-queue
    profiles:
      - donotstart
  deduplicator:
    build:
      context: ./deduplicator
      target: deduplicator
    networks:
      - deduplicator-queue
    restart: on-failure
    depends_on:
      - "news-queue"
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]
  deduplicator_test:
    build: deduplicator
    image: deduplicator_test
    depends_on:
      - "news-queue"
      - "translator"
    restart: "no"
    networks:
      - deduplicator-queue
    profiles:
      - donotstart
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]
  import:
    build: import
    env_file: ./postgres-config
    secrets:
      - postgres-password
    depends_on:
      - "news-queue"
      - "news-database"
    restart: on-failure
    networks:
      - import-queue
      - import-database
  summarizer:
    build:
      context: ./summarizer
      target: summarizer
    image: summarizer
    depends_on:
      - "news-queue"
      - "translator"
    restart: on-failure
    networks:
      - summarizer-queue
      - translator-summarizer
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]
  summarizer_test:
    build: summarizer
    image: summarizer_test
    depends_on:
      - "news-queue"
      - "translator"
    restart: "no"
    networks:
      - summarizer-queue
      - translator-summarizer
    profiles:
      - donotstart
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

  news-database:
    image: postgres
    env_file: ./postgres-config
    secrets:
      - postgres-password
    networks:
      - import-database
      - restapi-database
      - trends-news-database
    volumes:
      - pgdata:/var/lib/postgresql/data
  restapi:
    build: restapi
    env_file:
      - ./postgres-config
      - ./google-config
    secrets:
      - postgres-password
    depends_on:
      - "news-database"
    networks:
      - restapi-database
      - web
      - trends-database
      - restapi-userpreferences
  front:
    build: front
    depends_on:
      - "restapi"
    ports:
      - "8001:80"
    networks:
      - web
  opus-mt:
    build: Opus-MT
    image: opus-mt-base
    profiles:
      - donotstart
  translator:
    build: translator
    networks:
      - translator-summarizer
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]
  ner:
    build:
      context: ./ner
      target: ner
    networks:
      - ner-queue
    depends_on:
      - "news-queue"
    restart: on-failure
  ner_test:
    build: ner
    image: ner_test
    depends_on:
      - "news-queue"
    restart: "no"
    networks:
      - ner-queue
    profiles:
      - donotstart
  trends-database:
    image: redis
    command: redis-server
    networks:
      - trends-database
      - publish-trends
  trends:
    env_file: ./postgres-config
    build:
      context: ./trends
    secrets:
      - postgres-password
    networks:
      - trends-database
      - trends-news-database
      - publish-trends
    restart: on-failure
  userpreferences:
    image: redis
    command: redis-server --appendonly yes
    networks:
      - restapi-userpreferences
    volumes:
      - userpreferences:/data
  publish-topic:
    build:
      context: ./publish-topic
      target: publish-topic
    env_file: ./telegram-config
    secrets:
      - telegram-api-token
      - telegram-bot-token
    restart: on-failure
    networks:
      - publish-trends
    depends_on:
      - "trends-database"

secrets:
  postgres-password:
    file: ./postgres-password
  telegram-api-token:
    file: ./telegram-api-token
  postgres-password:
    file: ./postgres-password
  telegram-bot-token:
    file: ./telegram-bot-token

networks:
  import-database:
  restapi-database:
  trends-database:
  trends-news-database:
  scrapy-queue:
  entitier-queue:
  deduplicator-queue:
  import-queue:
  summarizer-queue:
  ner-queue:
  web:
  translator-summarizer:
  restapi-userpreferences:
  publish-trends:

volumes:
  pgdata:
  rabbitmqdata:
  userpreferences:
